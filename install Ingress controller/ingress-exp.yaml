apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hello-world-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$3
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /test1(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: app-v1
            port:
              number: 80
      - path: /test2(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: app-v2
            port:
              number: 80
  - host: test.nissisoluciones.com 
    http:
      paths:
      - path: /test200(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: app-v1
            port:
              number: 80
      - path: /test500(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: app-v2
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-server-ingress
  namespace: argocd
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    # If you encounter a redirect loop or are getting a 307 response code
    # then you need to force the nginx ingress to connect to the backend using HTTPS.
    #
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
spec:
  rules:
  - host: argocd.nissisoluciones.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: argocd-server
            port:
              name: https
  tls:
  - hosts:
    - argocd.nissisoluciones.com
    secretName: argocd-secret # do not change, this is provided by Argo CD